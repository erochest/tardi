/// The standard conditional.
///
/// ..s ? t:( ..s -- ..s' ) f:( ..s -- ..s' ) -- ..s'
///
/// This expects three items on the stack:
/// - a boolneam
/// - a lambda to call if the boolean is `#t`
/// - a lambda to call if the boolean is `#f`
///
/// == 0 [ "zero" ] [ "non-zero" ] if
: if   ? apply ;

/// `when` is `if` without the `else`.
/// ? if-true --
: when   [ ] if ;

/// ..s lambda x -- ..s' lambda x
: deep-apply   dupd [ apply ] 2dip ;

/// ..s pred exec -- ..s' pred exec ?
: while-continue?   deep-apply rot ! ;

/// pred exec --
: while-cleanup   2drop ;

/// `while` runs a lambda as long as a predicate lambda returns `#t`.
/// It's tested before each run of the execution lambda.
/// predicate execution --
: while   [
    while-continue? [ while-cleanup break ] when
    swap deep-apply swap
    ] loop ;
