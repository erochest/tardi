
uses: std/_vectors

exports:
    <vector> concat each empty? first fourth in? index-of? join last length map
    nth pop! pop-left! push! push-left! reduce second set-nth! sort! subvector
    third ;

/// v -- x
: first    0 swap nth ;
/// v -- x
: second   1 swap nth ;
/// v -- x
: third    2 swap nth ;
/// v -- x
: fourth   3 swap nth ;

/// v -- x
: last     [ length 1 - ] keep nth ;

/// v -- ?
: empty?   length 0 == ;

// TODO: tardi (and others) often have lots of small, private, helper words.
// maybe we could facilitate that by having a way to make them private and
// scope them to only be visible inside a small set of other words, primarily
// one other word.

/// vector l -- l vector max index
: each-init-index-limit   swap dup length 0 ;

/// vector lambda -- lambda vector max index
: each-init-state   each-init-index-limit ;

/// max index -- max index ?
: each-more?   2dup > ;

/// vector m index -- item vector m index
: each-get-item   -rot [ [ nth ] 2keep ] dip rot ;

/// lambda item v m i -- lambda v m i
: each-clear-apply   [ swap [ apply ] keep ] 3dip ;

/// i -- i'
: each-next   1 + ;

/// lambda vector max index -- lambda vector max index'
: each-loop
    [ each-more? ] [
        each-get-item
        each-clear-apply
        each-next
    ] while ;

/// l v m i --
: each-cleanup   4drop ;

/// vector lambda --
: each   each-init-state each-loop each-cleanup ;

/// vector lambda -- vector' lambda vector
: map-init   { } spin ;

/// vector' lambda item -- item lambda vector'
: map-init-step   spin ;

/// item lambda vector' -- item' lambda vector'
: map-clear-apply   [ [ apply ] keep ] dip ;

/// item l vector' -- vector' l
: map-push!   swap [ [ push! ] keep ] dip ;

/// vector' lambda vector -- vector' lambda
: map-loop
    [
        map-init-step
        map-clear-apply
        map-push!
    ] each ;

/// lambda --
: map-cleanup   drop ;

/// vector lambda -- vector'
: map   map-init map-loop map-cleanup ;

/// vector init ( accum item -- accum ) -- accum
: reduce
    rot
    [ swap [ apply ] keep ] each 
    drop ;
