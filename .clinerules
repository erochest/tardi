# Project Configuration

## Tech Stack

`rust`: Primary implementation language

`just`: Main workflow commands are implemented and documented in a `Justfile` in the main directory.

`jj`: Version control system with git backend

`cargo-nextest`: Test runner with filtering capabilities

## Project Structure

/cline_docs     -- Memory bank files for project documentation and context
    project-brief.md    -- Overview of the project and roadmap
    product_context.md  -- Purpose, problem space, and user experience goals
    active_context.md   -- Current focus, recent changes, and next steps
    system_patterns.md  -- Architecture, design patterns, and component relationships
    tech_context.md     -- Technologies, setup, and technical constraints
    progress.md         -- Current status, what's built, and what's left to build
/docs           -- Additional documentation
/src            -- All of the source code for the project
    main.rs     -- The primary entrypoint for the executable
    lib.rs      -- The primary entrypoint for the library
    error.rs    -- Defines different errors that the library is aware of and bundles them into one enum and an alias of `Result`
    vm/         -- Virtual Machine implementation
        mod.rs  -- VM module definition
        ops.rs  -- Operation implementations
        stack.rs -- Stack implementations
/tests          -- This directory contains integration tests. Most of them are built dynamically using a test harness that reads files from `tests/fixtures`
    /fixtures   -- This directory contains test fixtures. Each fixture has two files -- `FIXTURE.tardi` and `FIXTURE.stderr`. It also looks for files named `FIXTURE.stdout`. The test harness executes the `FIXTURE.tardi` file and compares its STDOUT against `FIXTURE.stdout` and its STDERR against `FIXTURE.stderr`, if those files exist

## Architecture

The primary entrypoint is in `src/main.rs`. The `src/lib.rs` file has two functions: `run_file` executes a source file, and `run_repl` runs a repl and executes the user's input.

## VM Implementation

- Indirect Threaded Code (ITC) approach chosen for VM implementation
- Function pointer table used for operation dispatch
- Instruction stream contains indices into the function pointer table
- Basic interpreter loop:
  1. Fetch next operation index
  2. Look up function pointer in table
  3. Execute operation
  4. Repeat
- Stack-based execution model
  - Data stack for operation arguments and results
  - Return stack (planned) for control flow
- Error handling with custom error types for VM operations

## Development Approach

### Feature-First Development
- Organize work around vertical slices of functionality
- Focus on delivering end-user/developer value
- Implement features across all system layers (scanner, compiler, VM)
- Complete one feature before moving to the next

### TDD
- Work in small steps
- Run tests often to get feedback constantly
- Write tests first. When starting a feature, write the integration test first. As we work through the implementation, write unit tests before implementing it
- Tests should be focused on one behavior
- Only write enough software to make the tests pass
- You can easily run all the tests by calling `just test`
- You can easily filter tests by running `just test FILTER`
- For VM operations, test stack manipulation correctness, error handling, and edge cases

### Feature Implementation Flow
1. Start with integration test defining the feature
2. Implement required scanner support
3. Add compiler implementation
4. Create VM operations
5. Add error handling across all layers
6. Verify integration test passes
7. Document the feature

## Coding

- Write simple code. Keep it readable.
- Make the code SOLID.
- A little duplication is OK. Only refactor after three repetitions.
- Constants defined and used in a file should appear at the top of the file, after `use` statements.
- Clear separation of VM components: core VM logic, operation implementations, and stack management

## Version Control

This project uses `jj` for version control with the `git` backend. The version control workflow goes like this:

1. Beginning work on a new feature, call `jj commit -m "DESCRIPTION"`. This creates an empty named commit to store the work, and an undescribed work area.

2. As work toward this feature is finished, after testing it, squash what's in the work area into the named commit with `jj squash`.

3. Once the feature is complete and all the tests are passing, change the description to include the story number. This requires an external editor.

4. Push this to GitHub my moving the `main` bookmark to point to the primary commit and push:

    ```
    jj bookmork move --to @- main
    jj git push
    ```

## Performance Considerations

- Current ITC implementation balances performance and safety
- Avoid unsafe code unless absolutely necessary
- May revisit Direct Threading in the future if performance becomes a critical concern
- Profile VM performance regularly to identify bottlenecks

## Error Handling

- Use custom error types defined in `error.rs`
- Implement VM-specific error types for operation failures
- Ensure proper stack underflow/overflow protection
- Implement type checking for operations where applicable

## Next Steps

1. Implement Basic Stack Operations:
   - Stack manipulation primitives (dup, swap, rot, drop)
   - Integration across scanner, compiler, and VM
   - Error handling for stack operations

2. Add Arithmetic Operations:
   - Scanner support for arithmetic operators
   - Compiler implementation for arithmetic expressions
   - VM operations for add, sub, mul, div
   - Error handling for arithmetic operations
   - Integration tests for arithmetic functionality

3. Implement Comparison Operations:
   - Scanner support for comparison operators
   - Compiler implementation for comparisons
   - VM operations for eq, lt, gt, etc.
   - Error handling for comparison operations
   - Integration tests for comparison functionality

4. Add Variable Support:
   - Scanner support for identifiers
   - Compiler implementation for variable declaration/assignment
   - VM operations for variable management
   - Error handling for variable operations
   - Integration tests for variable functionality
