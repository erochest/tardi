documentation
type checking and inference
module/word parsing
enums
structs
protocols/traits
multimethods
math under-/over-flow
HOF stack combinators
preserving combinators
cleaving combinators
`rdrop`
TCO
more stack shuffling words
optimize jump chains
locals
constants
sets
stack cursor
website
FFI
regex
threads
error messages with line and column
number conversions
global and dynamic scoping
garbage collection
LLVM compiler frontend
language server
tree sitter
make scanner, compiler, and evaluator more public
make lower-level API and define more in bootstrapping
editor configuration
currying
inlining
exception handling
sandboxing
thread pool and green threads
test framework
memory images
better logging setting in integration tests
warning or error on unrecognized symbols/words
better performing hashmap
clean up `todo!`/unimplemented methods
clean up EOF scanner token?
benchmarking
refactor and clean up scanning to DRY
more taking, less cloning
build positions from the elements of things
clean up and update documentation
backfill tests in env
test decompiling
resetting and reclaiming memory during long REPL sessions
`get_op_name` should use `Display`
decompiling/debugging formatting output better
use figment profiles for repl and script config
can i use Cli struct as a figment provider?
config/data qualifier and organization?
should one of the other main classes also be the orchestrator?
figure out a better way to pass the environment around or share it
add bootstrapping settings to config and don't have `Tardi::new` explicitly take bootstrap parameter
move `execute_ip` to testing? is it used at all?
bootstrapping defaults to `Tardi::default` implementation
more compiler tests
better tests for nested macro calls and edge cases in stack and accumulator handling
std/math/{zero?,sqrt,abs,...}
std/kernel/unless
repl improvements
stack persistence after errors in repl
edit config from command line
add stack effect comments
std/kernel/curry
local variables
dynamic variables
global variables
constants
test code snippets in documentation (doctest)
/mod word and %
error handling with io
option and result/either types
doc-comment Value type
cache atomic values
tuples
escape characters that need it in words
more number formats
make instruction size smaller
have jumps with different numbers of cells to hold the targets
just overall more defensive around unwraps
only return from named lambdas
dry up `execute_macro`
scanner tests
when compiling loops, don't traverse into nested loops
create `inline` similar to `loop`
string readers and writers
more defensive in io library
move op codes into native functions
`rot` as bootstrapping
jump to numbers built from multiple cells
remove unused opcodes
include module name in Lambda
have Callable::call make sure that the loop is running and goes until it's done
std/scanning/peek-value
io for bit /dev/null, network sockets, and pipes
use has_data_left when i can
be more defensive in TardiReader
std/kernel/<jump-stack> (but rename because it's not really a constructor)
have TardiWriter wrap an `Option<BufWriter<File>>`
if TardiWriter is consumed, return `#f`
move operations from the vm into std/strings
how best to represent strings?
substring edge cases
to_index and from_index edge and error cases
std/io/with-reader
