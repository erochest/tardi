src\vm\tests.rs:    // TODO: uncomment once there's a word for <jump-stack>
src\lib.rs:    // TODO: add an option for the bootstrap dir
src\lib.rs:// TODO: highlighting
src\lib.rs:// TODO: completion
src\lib.rs:// TODO: hints
src\lib.rs:// TODO: multilines (via rustyline::validate)
src\lib.rs:                // TODO: reset the stack and items on it on errors
src\core\mod.rs:// TODO: make the VM the orchestrator and get rid of this?
src\core\mod.rs:// TODO: rationalize how the environment gets passed around
src\core\mod.rs:    // TODO: add bootstrapping to Config and then deprecate this
src\core\mod.rs:    // TODO: can i move this into the test module?
src\core\mod.rs:// TODO: add bootstrapping from the default directory to here?
src\vm\ops.rs:// TODO: /mod (divmod)
src\vm\ops.rs:// TODO: move things out of opcodes and just have native functions
src\vm\ops.rs:    // TODO: move `rot` to bootstrapping
src\vm\ops.rs:    // TODO: do i need versions of this able to index larger numbers in the op table?
src\vm\ops.rs:    // TODO: There's nothing using this. Add a word for it
src\config.rs:    // TODO: make repl and script profiles?
src\config.rs:// TODO: can I use the Cli struct as a provider?
src\config.rs:// TODO: different qualifier and organization
src\env.rs:// TODO: umm. no tests for this module?
src\env.rs:// TODO: tests to make sure typical programs can decompile without errors
src\env.rs:// TODO: this isn't great for long-term interactive development
src\env.rs:                    // TODO: any way to use the Display implementation defined for Value or ValueData?
src\env.rs:        // TODO: sometimes the column before this is omitted. Make them line up.
src\vm\mod.rs:    // TODO: make this smaller and more optimized?
src\vm\mod.rs:    // TODO: there are also limits that usize places on things that i can't
src\vm\mod.rs:        // TODO: probably need to be more defensive about this.
src\vm\mod.rs:                .unwrap(); // TODO: be more defensive here
src\vm\mod.rs:            // TODO: not wild about using `VMError::Stop` for flow control here.
src\vm\mod.rs:            // TODO: not wild about using `VMError::Stop` for flow control here.
src\vm\mod.rs:            // TODO: DRY these up some
src\scanner\tests.rs:// TODO: better tests for errors
src\scanner\tests.rs:    // TODO: These tests are commented out since we now parse these as words,
tests\test_main.rs:        // TODO: some way to make the next line optional
src\value\lambda.rs:    // TODO: this needs to include the module as well somehow
src\value\lambda.rs:        todo!("Lambda::new_compiled")
src\value\lambda.rs:        todo!("Lambda::new_macro")
src\value\lambda.rs:                // TODO: have this run the IP for macros
src\scanner\mod.rs:        // TODO: have it look in imported/defined names for one and use that module here?
src\scanner\mod.rs:        // TODO: parse `module/word` pairs into symbols
src\scanner\mod.rs:        // TODO: Future number format support:
src\value.rs:// TODO: group Value and ValueData implementations better
src\value.rs:// TODO: Have a Value member for doc comments so we can grab those in macros
src\value.rs:// TODO: cache common values like small numbers, booleans, and empty collections.
src\value.rs:    // TODO: rename to Vector
src\value.rs:// TODO: pull this into its own module
src\value.rs:        // TODO: make this an Option<BufWriter<File>>> and if it's consumed.
src\value.rs:        // TODO: if it's None, return an error `#f`
src\value.rs:    // TODO: add for empty, network, and pipes
src\value.rs:    // TODO: add for empty, network, and pipes
src\value.rs:                // TODO: this is unstable. use this later. in the meantime, we'll assume it's always good
src\value.rs:        // TODO: be more defensive
src\value.rs:    // TODO: change these into as_boolean
src\value.rs:            // TODO: escape word if it starts with punctuation (`module::\:` or something)
src\value.rs:// TODO: should symbols also match on strings?
src\bootstrap\01-stack-ops.tardi:// TODO: bring in tuck and others
src\bootstrap\01-stack-ops.tardi:// TODO: Preserving combinators
src\compiler\mod.rs:// TODO: TCO
src\compiler\mod.rs:// TODO: Jump optimization
src\compiler\mod.rs:// TODO: warning or error on unrecognized symbols/words
src\compiler\mod.rs:// TODO: is there a faster hashmap I should use here?
src\compiler\mod.rs:        todo!("Compiler::get_current_module_mut")
src\compiler\mod.rs:            // TODO: also compile functions here? there'd be fewer constants hanging around.
src\compiler\mod.rs:            // TODO: does this ever get emitted anymore?
src\compiler\mod.rs:        // TODO: can I reuse this function for anything else?
src\compiler\mod.rs:        // TODO: once we get more code to test on, benchmark whether it's better to
src\compiler\mod.rs:        // TODO: do more of this instead of cloning.
src\compiler\mod.rs:        // TODO: get the pos for this value from the outer punctuation.
src\compiler\mod.rs:    // TODO: when this is done, can I reimplement `scan` to be
src\module\internal\fs.rs:    // TODO: propagate errors
src\main.rs:    // TODO: some way to edit config from the command line
src\compiler\tests.rs:// TODO: more tests
src\compiler\tests.rs:// TODO: it seems like previous tests works because the outer macro call is
src\compiler\tests.rs:    // TODO: can I embed a list in a `{ ... }` lambda?
src\module\internal\io.rs:        // TODO: push_op(op_table, &mut index, "<string-reader>", string_reader);
src\module\internal\io.rs:        // TODO: push_op(op_table, &mut index, "<string-writer>", string_writer);
src\module\internal\io.rs:    // TODO: needs to propagate errors
src\module\internal\io.rs:    // TODO: needs to propagate errors
src\module\internal\io.rs:// TODO: consume it here
src\module\internal\io.rs:    // TODO: propagate errors
src\module\internal\io.rs:// TODO: if it's None, return an error `#f`
src\module\internal\io.rs:// TODO: if it's None, return an error `#f`
src\module\internal\io.rs:// TODO: if it's None, return an error `#f`
src\module\internal\io.rs:// TODO: if it's None, return an error `#f`
src\module\internal\io.rs:// TODO: if it's None, return an error `#f`
src\module\internal\io.rs:// TODO: if it's None, return an error `#f`
src\module\internal\scanning.rs:        // TODO: peek-value (for things like `inline` after function declarations)
src\module\internal\strings.rs:// TODO: move this operations from the VM into here
src\module\internal\strings.rs:    // TODO: should strings always be represented as `Vec<char>`?
src\module\internal\strings.rs:    // TODO: this is missing some edges. one or two
src\module\internal\vectors.rs:// TODO: really need to implement an Option type for here
src\module\internal\vectors.rs:    // TODO: be more defensive about to_index and from_index
src\module\internal\vectors.rs:        // TODO: this works for non-strings, but strings can us an `id` function
src\module\internal\kernel\loop_word.rs:// TODO: `loop` and `inline` can be handled similarly
src\module\internal\kernel\loop_word.rs:// TODO: would i need to compile lambdas directly, though?
tests\fixtures\io.tardi:// TODO: worth having in std/io?
